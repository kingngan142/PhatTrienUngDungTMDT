document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('taskInput');
    const deadlineInput = document.getElementById('deadlineInput');
    const noteInput = document.getElementById('noteInput');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const taskList = document.getElementById('taskList');
    const filterOptions = document.querySelectorAll('.filter-option');

    // ----------------------------------------------------
    // H√†m th√™m c√¥ng vi·ªác m·ªõi
    // ----------------------------------------------------
    const addTask = () => {
        const taskText = taskInput.value.trim();
        const deadlineDate = deadlineInput.value; 
        const noteText = noteInput.value.trim(); 

        // Ki·ªÉm tra √¥ nh·∫≠p li·ªáu ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ƒë·ªÉ tr·ªëng
        if (taskText === "") {
            alert("Vui l√≤ng nh·∫≠p t√™n c√¥ng vi·ªác!");
            return;
        }

        // ƒê·ªãnh d·∫°ng ng√†y hi·ªÉn th·ªã
        const formattedDate = deadlineDate ? new Date(deadlineDate).toLocaleDateString('vi-VN', { 
            day: '2-digit', month: '2-digit', year: 'numeric' 
        }) : '';

        // T·∫°o ph·∫ßn t·ª≠ <li> m·ªõi cho c√¥ng vi·ªác
        const listItem = document.createElement('li');
        listItem.setAttribute('data-completed', 'false'); // Thu·ªôc t√≠nh l·ªçc
        
        // S·ª≠ d·ª•ng innerHTML ƒë·ªÉ t·∫°o n·ªôi dung cho li
        // √î tr√≤n (checkbox) v√† Ghi ch√∫ (task-note)
        listItem.innerHTML = `
            <input type="checkbox" class="checkbox-btn">
            <div class="task-details">
                <div class="task-main-info">
                    <p class="task-text">${taskText}</p>
                    <span class="task-deadline">${formattedDate}</span>
                </div>
                ${noteText ? `<p class="task-note">${noteText}</p>` : ''}
            </div>
            <button class="delete-btn">üóëÔ∏è</button>
        `;
        
        // Th√™m listItem v√†o danh s√°ch
        taskList.appendChild(listItem);

        // ƒê·∫∑t l·∫°i √¥ nh·∫≠p li·ªáu v·ªÅ tr·ªëng
        taskInput.value = '';
        deadlineInput.value = '';
        noteInput.value = '';

        // G√°n s·ª± ki·ªán cho c√°c ph·∫ßn t·ª≠ m·ªõi ƒë∆∞·ª£c t·∫°o
        attachTaskListeners(listItem);
        
        // Sau khi th√™m, ƒë·∫£m b·∫£o danh s√°ch hi·ªán t·∫°i ƒë∆∞·ª£c l·ªçc ƒë√∫ng
        filterTasks(document.querySelector('.filter-option.active').dataset.filter);
    };

    // G·∫Øn s·ª± ki·ªán cho n√∫t "Th√™m" v√† ph√≠m Enter
    addTaskBtn.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTask();
        }
    });

    // ----------------------------------------------------
    // H√†m g·∫Øn s·ª± ki·ªán cho c√¥ng vi·ªác (D√πng ƒë·ªÉ ƒê√°nh d·∫•u v√† X√≥a)
    // ----------------------------------------------------
    const attachTaskListeners = (listItem) => {
        const checkboxBtn = listItem.querySelector('.checkbox-btn');
        const deleteBtn = listItem.querySelector('.delete-btn');

        // ƒê√°nh d·∫•u c√¥ng vi·ªác "ƒë√£ ho√†n th√†nh" b·∫±ng √î tr√≤n (checkbox)
        checkboxBtn.addEventListener('change', () => {
            listItem.classList.toggle('completed', checkboxBtn.checked);
            listItem.setAttribute('data-completed', checkboxBtn.checked);
            
            // L·ªçc l·∫°i danh s√°ch sau khi tr·∫°ng th√°i thay ƒë·ªïi
            filterTasks(document.querySelector('.filter-option.active').dataset.filter);
        });

        // X√≥a c√¥ng vi·ªác
        deleteBtn.addEventListener('click', () => {
            taskList.removeChild(listItem);
        });
    }

    // ----------------------------------------------------
    // Y√™u c·∫ßu: H√†m l·ªçc danh s√°ch c√¥ng vi·ªác
    // ----------------------------------------------------
    const filterTasks = (filterType) => {
        const items = taskList.querySelectorAll('li');
        
        items.forEach(item => {
            const isCompleted = item.getAttribute('data-completed') === 'true';
            
            let shouldShow = false;

            if (filterType === 'all') {
                shouldShow = true;
            } else if (filterType === 'completed') {
                shouldShow = isCompleted;
            } else if (filterType === 'uncompleted') {
                shouldShow = !isCompleted;
            }

            item.style.display = shouldShow ? 'flex' : 'none';
        });
    }

    // G·∫Øn s·ª± ki·ªán cho c√°c n√∫t L·ªçc
    filterOptions.forEach(option => {
        option.addEventListener('click', () => {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho n√∫t l·ªçc
            filterOptions.forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');

            // Th·ª±c hi·ªán l·ªçc
            filterTasks(option.dataset.filter);
        });
    });
    
    // Kh·ªüi t·∫°o: L·ªçc m·∫∑c ƒë·ªãnh khi t·∫£i trang
    filterTasks('uncompleted'); 
});
